name: Django DRF CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.9"
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/django-drf-template

jobs:
  build-and-install:
    name: Build & Install
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev gdal-bin

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov flake8 bandit safety

      - name: Verify installation
        run: |
          python --version
          pip list
          python manage.py check --deploy
        working-directory: ./django_project

  lint-and-security:
    name: Lint & Security Scan
    runs-on: ubuntu-latest
    needs: build-and-install

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 bandit safety isort black

      - name: Code formatting check (Black)
        run: black --check --diff .

      - name: Import sorting check (isort)
        run: isort --check-only --diff .

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan with bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -ll

      - name: Security scan with safety
        run: |
          safety scan --output=json --output-file=safety-report.json || true
          safety scan --output=screen

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  test:
    name: Test with Database
    runs-on: ubuntu-latest
    needs: build-and-install

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_django_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt pytest pytest-django pytest-cov

      - name: Wait for PostgreSQL
        run: |
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U test_user; do
            sleep 2
          done
          echo "‚úÖ PostgreSQL is ready!"

      - name: Run migrations
        working-directory: ./django_project
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_django_db
          DJANGO_SETTINGS_MODULE: config.settings.local
        run: |
          echo "üöÄ Running migrations..."
          python manage.py migrate --noinput

      - name: Run tests with coverage
        working-directory: ./django_project
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_django_db
          DJANGO_SETTINGS_MODULE: config.settings

        run: |
          echo "üß™ Running tests..."
          pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
            test-results.xml

  build-docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

      - name: Show Docker Image Info
        run: docker images ${{ env.DOCKER_IMAGE }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull and Run from Docker Hub
        run: |
          echo "üöÄ Deploying latest image..."
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 8000:8000 --name django_app ${{ env.DOCKER_IMAGE }}:latest

      - name: Show Running Containers
        run: docker ps -a

      - name: Health Check
        run: |
          echo "üîç Checking health..."
          sleep 10
          curl -f http://localhost:8000/ || exit 1

      - name: Notify
        run: echo "‚úÖ Deployment completed successfully!"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-docker, deploy]
    if: always()

    steps:
      - name: Cleanup Docker
        run: |
          echo "üßπ Cleaning up old Docker images..."
          docker system prune -af
