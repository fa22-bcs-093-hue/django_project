name: Django DRF CI/CD Pipeline

on:
  push:
    branches: ["main", "develop", "feature/*"]
  pull_request:
    branches: ["main", "develop"]

env:
  PYTHON_VERSION: "3.9"
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/django-drf-template

jobs:
  build-and-test:
    name: Build, Format, Lint, Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_django_db
        options: >-
          --health-cmd pg_isready -U test_user -d test_django_db
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # install requirements + developer tools in one command
          pip install --no-cache-dir -r requirements.txt \
            black isort bandit safety pytest pytest-django pytest-cov

      # -------------------------------
      # Formatting: isort + Black (auto-fix)
      # -------------------------------
      - name: Run isort
        run: |
          isort .

      - name: Run black
        run: |
          black .

      - name: Commit formatting changes (if any)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          # commit only if there are changes
          git diff --quiet || (git commit -m "chore: auto-format (black + isort)" && git push)
        # allow push to protected branches only if your repo allows workflow actor to push;
        # if not permitted, this step will harmlessly fail - consider removing commit+push if you don't want CI to modify repo.

      # -------------------------------
      # Linting & Security
      # -------------------------------
      - name: Run flake8
        run: |
          pip install flake8
          flake8 . --count --max-complexity=10 --max-line-length=127 || true

      - name: Bandit - Security Scan
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Safety - Dependency Vulnerability Scan
        run: |
          # use safety's new 'scan' command (if available) and produce JSON file
          safety scan --output=json --output-file=safety-report.json || safety check --json > safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

      # -------------------------------
      # Wait for DB & run migrations
      # -------------------------------
      - name: Wait for PostgreSQL
        run: |
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U test_user && break
            echo "Waiting for Postgres ($i)..."
            sleep 2
          done
          pg_isready -h localhost -p 5432 -U test_user

      - name: Run migrations
        working-directory: ./django_project
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_django_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_NAME: test_django_db
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          DJANGO_SETTINGS_MODULE: config.settings.test
        run: |
          python manage.py migrate --noinput

      # -------------------------------
      # Run tests with coverage
      # -------------------------------
      - name: Run tests
        working-directory: ./django_project
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_django_db
          DJANGO_SETTINGS_MODULE: config.settings.test
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml

      - name: Upload test reports & coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            django_project/test-results.xml
            django_project/coverage.xml
            django_project/htmlcov/

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Show pushed image digest
        run: |
          echo "Image tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.docker_build.outputs.digest }}"

  deploy:
    name: Deploy (example)
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull and run image (example)
        run: |
          echo "üì¶ Pulling image..."
          docker pull ${{ env.DOCKER_IMAGE }}:latest || true
          # NOTE: running containers on the runner is ephemeral ‚Äî replace this with real deploy commands:
          # e.g. kubectl apply, render deploy, aws ecs update-service, flyctl deploy, etc.
          echo "‚úîÔ∏è Deploy step completed (example)."

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()
    steps:
      - name: Cleanup Docker resources
        run: docker system prune -af || true
