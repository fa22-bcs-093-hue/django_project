name: Django DRF CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.9"
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/django-drf-template

jobs:
  # Stage 1: Build & Install
  build-and-install:
    name: Build & Install
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev gdal-bin

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov flake8 bandit safety

      - name: Verify installation
        run: |
          python --version
          pip list

  # Stage 2: Lint/Security Scan
  lint-and-security:
    name: Lint & Security Scan
    runs-on: ubuntu-latest
    needs: build-and-install

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 bandit safety isort black

      - name: Black Formatting Check
        run: black --check --diff .

      - name: Isort Import Order Check
        run: isort --check-only --diff .

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan (bandit + safety)
        run: |
          bandit -r . -f txt -o bandit-report.txt || true
          safety check --output text > safety-report.txt || true

      - name: Upload reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.txt
            safety-report.txt

  # Stage 3: Test (with DB service)
  test:
    name: Test with PostgreSQL
    runs-on: ubuntu-latest
    needs: build-and-install

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_django_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-django pytest-cov

      - name: Wait for DB
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 -U test_user && break
            echo "Waiting for PostgreSQL..."
            sleep 3
          done

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_django_db
        run: python django_project/manage.py migrate

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_django_db
        run: pytest --cov=. --cov-report=xml --junitxml=test-results.xml

      - uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage.xml
            test-results.xml

  # Stage 4: Build & Push Docker Image
  build-docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

      - name: Verify Docker image
        run: docker pull ${{ env.DOCKER_IMAGE }}:latest

  # Stage 5: Cleanup
  cleanup:
    name: Cleanup Docker
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: always()
    steps:
      - name: Remove unused Docker data
        run: docker system prune -af
