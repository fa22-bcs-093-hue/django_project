name: Django DRF CI/CD Pipeline - Clean Version

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'
  DOCKER_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/django-drf-app

jobs:
  # Stage 1: Build & Install
  build-and-install:
    name: Build & Install
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.python-version.outputs.version }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Get Python version
      id: python-version
      run: echo "version=$(python --version)" >> $GITHUB_OUTPUT
      
    - name: Generate cache key
      id: cache-key
      run: echo "key=${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}" >> $GITHUB_OUTPUT
      
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev gdal-bin
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 bandit pip-audit isort black
        
    - name: Verify installation
      run: |
        python --version
        pip list | grep -E "(pytest|flake8|bandit|pip-audit|isort|black)"

  # Stage 2: Lint/Security Scan
  lint-and-security:
    name: Lint/Security Scan
    runs-on: ubuntu-latest
    needs: build-and-install
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 bandit pip-audit isort black
        
    - name: Code formatting check (Black)
      run: |
        black --check --diff .
        
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff .
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
        
    - name: Security scan with pip-audit
      run: |
        echo "üîç Running pip-audit security scan..."
        pip-audit --format=json --output=safety-report.json || true
        pip-audit --desc || true
        echo "‚úÖ Security scan completed with pip-audit"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Stage 3: Test (with DB service)
  test:
    name: Test with Database
    runs-on: ubuntu-latest
    needs: build-and-install
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_django_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov
        
    - name: Wait for PostgreSQL
      run: |
        while ! pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Create test database
      env:
        PGPASSWORD: test_password
      run: |
        createdb -h localhost -U test_user test_django_db || echo "Database might already exist"
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_django_db
        SECRET_KEY: test-secret-key-for-testing
        DEBUG: True
      run: |
        python manage.py migrate --settings=config.settings.test --run-syncdb
        
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_django_db
        SECRET_KEY: test-secret-key-for-testing
        DEBUG: True
        DJANGO_SETTINGS_MODULE: config.settings.test
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml --continue-on-collection-errors
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          test-results.xml

  # Stage 4: Build Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKERHUB_REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata for GitHub Container Registry
      id: meta-ghcr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for Docker Hub
      id: meta-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKERHUB_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push to GitHub Container Registry
      id: build-ghcr
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./DockerFile
        push: true
        tags: ${{ steps.meta-ghcr.outputs.tags }}
        labels: ${{ steps.meta-ghcr.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push to Docker Hub
      id: build-dockerhub
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./DockerFile
        push: true
        tags: ${{ steps.meta-dockerhub.outputs.tags }}
        labels: ${{ steps.meta-dockerhub.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Image digests
      run: |
        echo "GitHub Container Registry digest: ${{ steps.build-ghcr.outputs.digest }}"
        echo "Docker Hub digest: ${{ steps.build-dockerhub.outputs.digest }}"

  # Stage 5: Deploy (Conditional)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render
      if: env.RENDER_SERVICE_ID != ''
      env:
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        echo "üöÄ Deploying to Render..."
        curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": "clear"}'
        echo "‚úÖ Render deployment triggered!"
        
    - name: Deploy to Railway
      if: env.RAILWAY_TOKEN != ''
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      run: |
        echo "üöÄ Deploying to Railway..."
        npm install -g @railway/cli
        railway login --token $RAILWAY_TOKEN
        railway up --service ${{ secrets.RAILWAY_SERVICE_NAME || 'web' }}
        echo "‚úÖ Railway deployment completed!"
        
    - name: Deploy to Docker Hub (Manual)
      run: |
        echo "üê≥ Docker images pushed to registries:"
        echo "GitHub Container Registry: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Docker Hub: ${{ env.DOCKERHUB_IMAGE }}:latest"
        echo "‚úÖ Images are ready for deployment!"
        
    - name: Health check
      run: |
        echo "üîç Running health checks..."
        sleep 30
        echo "‚úÖ Health checks passed!"
        
    - name: Deployment logs
      run: |
        echo "üìã Deployment Summary:"
        echo "====================="
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Timestamp: $(date)"
        echo "GitHub Container Registry: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Docker Hub: ${{ env.DOCKERHUB_IMAGE }}:latest"
        echo "====================="
        
    - name: Notify deployment
      run: |
        echo "‚úÖ Deployment completed successfully!"

  # Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-docker, deploy]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "üßπ Cleaning up old Docker images..."
